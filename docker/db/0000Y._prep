include(dist/etc/config_m4.inc)dnl
/*
 * CRIMSy
 * Copyright 2020 Leibniz-Institut f. Pflanzenbiochemie
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/* 
 * Common header to all scripts; just increment schema version
 */
\connect lbac 
\connect - lbac
\set LBAC_SCHEMA_VERSION '\'0000Y\''

BEGIN;
UPDATE lbac.info SET value=:LBAC_SCHEMA_VERSION WHERE key='DBSchema Version';


/*
 * ToDo: xxxxx add ON UPDATE CASCADE/ ON DELETE CASCADE ?
 */

CREATE TABLE experiments (
    experimentid    SERIAL NOT NULL PRIMARY KEY,
    code            VARCHAR,
    description     VARCHAR,
    template        BOOLEAN NOT NULL DEFAULT FALSE,
    aclist_id       INTEGER REFERENCES aclists(id) ON UPDATE CASCADE ON DELETE CASCADE,
    owner_id        INTEGER REFERENCES usersGroups(id) ON UPDATE CASCADE ON DELETE CASCADE,
    ctime           TIMESTAMP NOT NULL DEFAULT now(),
    projectid       INTEGER REFERENCES projects(id)  ON UPDATE CASCADE ON DELETE CASCADE,
);

CREATE TABLE exp_records (
    exprecordid     BIGSERIAL NOT NULL PRIMARY KEY,
    experimentid    INTEGER NOT NULL REFERENCES experiments (experimentid) ON UPDATE CASCADE ON DELETE CASCADE,
    changetime      TIMESTAMP,
    creationtime    TIMESTAMP,
    type            INTEGER,
    revision        INTEGER NOT NULL DEFAULT 1,
    next            BIGINT DEFAULT NULL REFERENCES exp_records(exprecordid) ON UPDATE CASCADE ON DELETE SET NULL
);

/*
 * Note: either materialid or itemid must be set
 *
 * ToDo: xxxxx additional indexing for outcome column (example see below)
 */
CREATE TABLE exp_assay_records (
    recordid        BIGSERIAL NOT NULL PRIMARY KEY,
    exprecordid     BIGINT NOT NULL REFERENCES exp_records(exprecordid) ON UPDATE CASCADE ON DELETE CASCADE,
    materialid      INTEGER REFERENCES materials(materialid) ON UPDATE CASCADE ON DELETE CASCADE,
    itemid          INTEGER CHECK (COALESCE(materialid, itemid) IS NOT NULL)
                    REFERENCES items(id) ON UPDATE CASCADE ON DELETE CASCADE,
    rank            INTEGER DEFAULT 0,
    type            INTEGER NOT NULL,
    outcome         VARCHAR
);

/*
 * B-tree index example:
 * CREATE INDEX i_exp_assay_outcome_val ON exp_assay_outcomes (((outcome->>'val')::DOUBLE PRECISION))
 *      WHERE (outcome->>'val') IS NOT NULL;
 */

CREATE TABLE exp_assays (
    exprecordid     BIGINT NOT NULL PRIMARY KEY REFERENCES exp_records(exprecordid) ON UPDATE CASCADE ON DELETE CASCADE,
    outcometype     INTEGER NOT NULL,
    remarks         VARCHAR,
    targetid        INTEGER REFERENCES materials (materialid) ON UPDATE CASCADE ON DELETE SET NULL,
    units           VARCHAR
);

/* ToDo: xxxxx create fulltext index on exp_texts! */
CREATE TABLE exp_texts (
    exprecordid     BIGINT NOT NULL PRIMARY KEY REFERENCES exp_records(exprecordid) ON UPDATE CASCADE ON DELETE CASCADE,
    text            VARCHAR 
);

/**
 * - Agency: job scheduling
 * - barcode printing
 */
CREATE TABLE jobs (
    jobid       SERIAL NOT NULL PRIMARY KEY,
    input       BYTEA,
    jobdate     TIMESTAMP NOT NULL DEFAULT now(),
    jobtype     INTEGER NOT NULL,
    output      BYTEA,
    ownerid     INTEGER REFERENCES usersgroups(id) ON UPDATE CASCADE ON DELETE CASCADE,
    queue       VARCHAR NOT NULL,
    status      INTEGER NOT NULL
);

CREATE TABLE printers (
    queue       VARCHAR NOT NULL PRIMARY KEY,
    name        VARCHAR NOT NULL,
    aclistid    INTEGER NOT NULL REFERENCES aclists(id) ON UPDATE CASCADE ON DELETE CASCADE,
    config      VARCHAR NOT NULL DEFAULT '',
    contact     VARCHAR NOT NULL DEFAULT '',
    driver      VARCHAR NOT NULL,
    model       VARCHAR NOT NULL DEFAULT '',
    ownerid     INTEGER NOT NULL REFERENCES usersgroups(id) ON UPDATE CASCADE ON DELETE CASCADE,
    place       VARCHAR NOT NULL DEFAULT '',
    status      INTEGER NOT NULL DEFAULT 0
);

CREATE TABLE labels (
    id          SERIAL NOT NULL PRIMARY KEY,
    name        VARCHAR NOT NULL DEFAULT '',
    description VARCHAR NOT NULL DEFAULT '',
    labeltype   VARCHAR NOT NULL DEFAULT '',
    printermodel VARCHAR NOT NULL DEFAULT '',
    config      VARCHAR NOT NULL DEFAULT ''
);

CREATE TABLE preferences (
    id          SERIAL NOT NULL PRIMARY KEY,
    user_id     INTEGER NOT NULL REFERENCES usersgroups(id) ON UPDATE CASCADE ON DELETE CASCADE,
    key         VARCHAR NOT NULL,
    value       VARCHAR,
    UNIQUE (user_id, key)
);

COMMIT;
