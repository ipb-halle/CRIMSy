#!/bin/bash
#
# Cloud Resource & Information Management System (CRIMSy)
# Copyright 2020 Leibniz-Institut f. Pflanzenbiochemie 
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#==========================================================
#
#
LBAC_SSL_KEYFILE=lbac_cert.key
LBAC_SSL_PWFILE=lbac_cert.passwd
#
#
#
function autoJoin {
    
    for i in `cat etc/clouds.cfg` ;do
        CLOUD=`echo $i | cut -d';' -f1`
        LBAC_DISTRIBUTION_POINT=`echo $i | cut -d';' -f2`

        if test -n "$LBAC_DISTRIBUTION_POINT" ; then
            downloadPackage
            install
        fi
    done
    installDB

}

function cleanUp {
    rm $TMP_RESULT
}

function dialogCheckCert {
        tmp=`sha256sum $CLOUD/chain.txt | cut -d' ' -f1`
        dialog --backtitle "Join Cloud" \
          --yesno "Please compare the checksum of the CA certificate:

$tmp 

Does this checksum match the official checksum?" 15 72

        case $? in
        0)
                echo $CLOUD 
                ;;
        *)
                # rollback
                rm -r etc/$CLOUD
                error "Certificate mismatch"
                ;;
        esac

        openssl verify -CAfile etc/$CLOUD/chain.txt etc/$CLOUD/devcert.pem || error "Invalid developer certificate"

        # ToDo: crl check
}

function dialogDownload {
        tmp=$1
        dialog --backtitle "Join Cloud" \
          --inputbox "Please specify download address for additional cloud" \
          15 72 "URL" 2>$TMP_RESULT || error "Aborted"
        DOWNLOAD_URL=`cat $TMP_RESULT`
        curl --silent --output etc/$CLOUD/chain.txt $DOWNLOAD_URL/chain.txt
        curl --silent --output etc/$CLOUD/devcert.pem $DOWNLOAD_URL/devcert.pem
        curl --silent --output etc/$CLOUD/$CLOUD.crl $DOWNLOAD_URL/crl.pem
}

#
# The header of the encrypted configuration file contains 
# the name of the institution and the "X509v3 Subject Key Identifier"
# of the key used to encrypt the configuration file. Both
# information is needed by the distributor to a) select and 
# b) decrypt the configuration file in the process of creating 
# the individualized software package.
#
function dialogEncrypt {

        dialog --backtitle "Cloud Resource & Information Management System (CRIMSy)" \
          --msgbox "Die Konfigurationsdatei wird jetzt verschlüsselt. Bitte senden Sie dem Cloud-Administrator die Datei $LBAC_DATASTORE/etc/$CLOUD/config.sh.asc per Email zu. Sie erhalten dann von ihm Nachricht, wann und wie Sie mit dem Installationsprozess fortfahren können. " \
        15 72
        case $? in
                0)
                        encrypt
                        ;;
                *)
                        error "Aborted."
                        ;;
        esac

}

function downloadPackage {

    curl --silent --output $LBAC_DATASTORE/etc/$CLOUD/$LBAC_INSTITUTION_MD5.$CLOUD \
      $LBAC_DISTRIBUTION_POINT/$LBAC_INSTITUTION_MD5.$CLOUD

    openssl smime -verify -in $LBAC_DATASTORE/etc/$CLOUD/$LBAC_INSTITUTION_MD5.$CLOUD \
      -certfile $LBAC_DATASTORE/etc/$CLOUD/devcert.pem \
      -CAfile $LBAC_DATASTORE/etc/$CLOUD/chain.txt | openssl smime -decrypt -inform PEM  \
      -inkey $LBAC_DATASTORE/etc/lbac_cert.key \
      -passin file:$LBAC_DATASTORE/etc/lbac_cert.passwd  \
      -out $LBAC_DATASTORE/etc/$CLOUD/$CLOUD.tar.gz || error "Could not verify and decrypt install package"

    rm $LBAC_DATASTORE/etc/$CLOUD/$LBAC_INSTITUTION_MD5.$CLOUD
}

function encrypt {
    rm -f etc/$CLOUD/config.sh.asc && \
    cat << EOF > "etc/$CLOUD/config.sh.asc" 
#
# LBAC_INSTITUTION=$LBAC_INSTITUTION
# CERTIFICATE_ID=`openssl x509 -in etc/$CLOUD/devcert.pem -text | \
          grep -A1 "X509v3 Subject Key Identifier" | tail -1 | tr -d $' \n'`
# `date`
#
# ----- SMIME ENCRYPTED CONFIG BEGIN -----
`openssl smime -encrypt -binary -outform PEM -aes-256-cbc \
  -in etc/config.sh etc/$CLOUD/devcert.pem`
# ----- SMIME ENCRYPTED CONFIG END -----
EOF

}

function error {
        cleanUp
        echo $1
        exit 1
}

function install {
    tar -C $LBAC_DATASTORE -xzf $LBAC_DATASTORE/etc/$CLOUD/$CLOUD.tar.gz || error "Error extracting tar archive"
    rm $LBAC_DATASTORE/etc/$CLOUD/$CLOUD.tar.gz

    # intermediate master.sh has now been overwritten 
    . $LBAC_DATASTORE/dist/etc/$CLOUD/master.sh

    # create database script
    cat <<EOF | m4 > $LBAC_DATASTORE/dist/etc/$CLOUD/$CLOUD.sql
dnl
dnl Automatically generated by join.sh 
dnl
define(\`LBAC_CLOUD',\`$CLOUD')dnl
define(\`LBAC_MASTER_SKIP',\`$LBAC_MASTER_SKIP')dnl
define(\`LBAC_MASTER_NODE_ID', \`$LBAC_MASTER_NODE_ID')dnl
define(\`LBAC_MASTER_URL', \`$LBAC_MASTER_URL')dnl
define(\`LBAC_MASTER_INSTITUTION', \`$LBAC_MASTER_INSTITUTION')dnl
define(\`LBAC_NODE_ID',\`$LBAC_NODE_ID')dnl
define(\`LBAC_NODE_RANK',\`$LBAC_NODE_RANK')dnl
dnl
INSERT INTO clouds (name) VALUES ('LBAC_CLOUD') ON CONFLICT DO NOTHING;
LBAC_MASTER_SKIP INSERT INTO nodes (id, baseurl, institution, local) VALUES 
LBAC_MASTER_SKIP ('LBAC_MASTER_NODE_ID', 'LBAC_MASTER_URL', 'LBAC_MASTER_INSTITUTION', False) ON CONFLICT DO NOTHING;
LBAC_MASTER_SKIP INSERT INTO cloud_nodes (node_id, rank, cloud_id) SELECT 'LBAC_MASTER_NODE_ID'::UUID AS node_id, 10 AS rank, id AS cloud_id 
LBAC_MASTER_SKIP FROM clouds WHERE name='LBAC_CLOUD' ON CONFLICT DO NOTHING;
INSERT INTO cloud_nodes (node_id, rank, cloud_id) SELECT 'LBAC_NODE_ID'::UUID,LBAC_NODE_RANK, id AS cloud_id 
FROM clouds WHERE name='LBAC_CLOUD' ON CONFLICT DO NOTHING;
EOF
    
    # key setup
    cp "$LBAC_DATASTORE/etc/$LBAC_SSL_PWFILE" "$LBAC_DATASTORE/dist/etc/$CLOUD/$CLOUD.keypass"

    openssl pkey -in "$LBAC_DATASTORE/etc/$LBAC_SSL_KEYFILE" \
              -passin "file:$LBAC_DATASTORE/etc/$LBAC_SSL_PWFILE" \
              -out "$LBAC_DATASTORE/dist/etc/$CLOUD/$CLOUD.key" 

    openssl pkcs12 -export -in "$LBAC_DATASTORE/dist/etc/$CLOUD/$CLOUD.cert" \
      -inkey "$LBAC_DATASTORE/dist/etc/$CLOUD/$CLOUD.key" \
      -passout "file:$LBAC_DATASTORE/dist/etc/$CLOUD/$CLOUD.keypass" \
      -out "$LBAC_DATASTORE/dist/etc/$CLOUD/$CLOUD.pkcs12"
#      -passin "file:$LBAC_DATASTORE/etc/$LBAC_SSL_PWFILE" \

    # install CLOUD certificates into ui container
    sudo $LBAC_DATASTORE/dist/bin/setupROOT.sh installCloudCert $CLOUD

}

function installDB {
    # activate all clouds in ui container and create DB records

    rm $LBAC_DATASTORE/dist/etc/clouds.sql

    for i in `cat $LBAC_DATASTORE/etc/clouds.cfg` ; do
        CLOUD=`echo $i | cut -d';' -f1`
        cat $LBAC_DATASTORE/dist/etc/$CLOUD/$CLOUD.sql > $LBAC_DATASTORE/dist/etc/clouds.sql
    done

    sudo $LBAC_DATASTORE/dist/bin/setupROOT.sh installClouds
}

function saveCloudInfo {

        echo /$CLOUD$';/d\ni\n'$CLOUD$';'$DOWNLOAD_URL$'\n.\nw\nq\n' | \
            ed etc/clouds.cfg
}

#
#==========================================================
#
if test ! -r $HOME/.lbac ; then
        echo "CRIMSy ist nicht richtig konfiguriert"
        exit 1
fi
. $HOME/.lbac
if test "!" "(" -n "$LBAC_DATASTORE" -a -d "$LBAC_DATASTORE"   -a -w "$LBAC_DATASTORE" ")" ; then
        echo "LBAC_DATASTORE ist nicht definiert oder nicht schreibbar"
        exit 1
fi
. $LBAC_DATASTORE/etc/config.sh > /dev/null

pushd $LBAC_DATASTORE >/dev/null

TMP_RESULT=`mktemp /tmp/lbac_join.XXXXXX`
        case "$1" in
            --request)
                CLOUD=$2
                if test -z $CLOUD ; then
                    error "Please provide cloud name"
                fi
                mkdir -p etc/$CLOUD
                mkdir -p dist/etc/$CLOUD
                dialogDownload
                dialogCheckCert
                dialogEncrypt
                saveCloudInfo
                cleanUp
                ;;
            --join)
                CLOUD=$2
                if test -z $CLOUD ; then
                    error "Please provide cloud name"
                fi
                LBAC_DISTRIBUTION_POINT=`grep $CLOUD$';' etc/clouds.cfg | cut -d';' -f2`
                if test -n "$LBAC_DISTRIBUTION_POINT" ; then
                    downloadPackage
                    install
                    installDB
                    cleanUp
                else 
                    error "Please run 'join.sh --request $CLOUD' first."
                fi
                ;;
            --leave)
                CLOUD=$2
                if test -z $CLOUD ; then
                    error "Please provide cloud name"
                fi
                ;;
            --auto)
                autoJoin
                cleanUp
                ;;
            *)
                error "Usage: join.sh [--request|--join] CLOUD"
                ;;
        esac
popd > /dev/null
